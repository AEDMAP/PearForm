.. PearForm documentation master file, created by
   sphinx-quickstart on Mon Jan 22 01:30:12 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

PearForm - Documentation
====================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

Code Snippet
==================

.. code-block:: java

  formView = new FormView(mContext);
  FormBuilder field = mFormView.getFormBuilder();
  formView
    .add(field.text(FIRST_NAME_KEY, "First name", getString(R.string.firstname_error), textValidator))
    .add(field.text(LAST_NAME_KEY, "Last name", getString(R.string.lastname_error), textValidator))
    .add(field.email(EMAIL_KEY, "Email", getString(R.string.email_error), emailValidator))
    .add(field.text(ZIP_CODE_KEY, "Zip code", getString(R.string.zipcode_error), zipCodeValidator))
    .addIf(isGenderInformationAvailable(), field.spinner(ACCOUNT_GENDER))
    .prefillWhen(prefill, bundle)
    .build();


What is it
==================
PearForm is an **Android Framework** for easily creating forms :

- **collect** all fields input values (as the form result)
- **validation** (validate all mandatory fields)
- **prefill**: provide information to fill fields up with
- **conditional add** : **addIf** statement allows adding a field only if the **first parameter** boolean condition is **true**

It is a **Framework** because it invites developers to build forms following a **frame** that enhances :

- modular code (every field is like a component)
- code reuse (every field of the same type almost always has a similar handling logic, maybe a different validation procedure)
- code clarity (the **XML** layout file will contain a **FormView** object only, clearly indicating a new developer they have a form there)
- look and feel consistency (every field of the same type should appear the same for consistency)
- accomodates fast changes (since fields are instanciated dinamically, changing their order or adding/removing a new field is just a matter of one line: given the **Field** object has been built respecting the **Frame**, it just needs to be chained within the form creation for it to be handled by the **FormView** object)

Why
==================
- developers time is expensive
- repetitive tasks are boring and error prone

If an application provides a consistent number of forms, pretty soon we'll find ourselves solving the same challenges, some of which appear to me being the following:

Common Form Challenges
---------------------------

- create a list of fields (aiming to a consistent look and feel throughall the application)
- collect the input value from every field to obtain a resulting form **result object**
- prefill the form with provided information
- validate every field and show an error in case the check does not pass
- validate the form when clicking on a view (attach click listener)

PearForm Philosophy
---------------------------
A Form (**FormView**) is made of a list of components (**IField**). Every fields knows how to handle himself for what concerns:

- validating its input value
- collect its input value to pass back to the parent
- show error in case validation check does not succeed
- prefill its input value in case information is available

The Form act as a controller in such it iterates on the fields list and asks them to validate/collect/showError/prefill according to the action the developer wants to take on the **FormView**.

For instance to collect all fields input value, this is what happens with a call to **formView.getResult()**, that returns a **Bundle** object containing all fields input values organized by **key** (constant string), provided at the moment of the form creation.

.. code-block:: java

  @Override public Bundle getResult() {
    Bundle bundle = new Bundle();
    for (FormRow row : mRows) {
        if(row.isField()) {
            IField field = (IField) row.getView();
            Bundle fieldResult = field.getValue();
            if(fieldResult != null)
                bundle.putAll(fieldResult);
        }
    }
    return bundle;
  }


The **FormView** object is a simple **Custom Widget** extending from **LinearLayout**, that

- keeps the list of children **Fields** components
- exposes simple methods to operate on them as a set.


How it works
==================

Basic sample
---------------------

Create the **list of fields**, add it to a **FormView** instance as follows:

.. code-block:: java

  MaterialText firstName = new MaterialText(context)
    .hint(hint)
    .error(error)
    .resultKey(FIRST_NAME_KEY); // (String) key

  MaterialText lastName = new MaterialText(context)
    .hint(hint)
    .error(error)
    .resultKey(LAST_NAME_KEY); // (String) key

  MaterialText email = new MaterialText(context)
    .hint(hint)
    .error(error)
    .resultKey(EMAIL_KEY); // (String) key

  FormView form = new FormView(context)
    .add(firstName)
    .add(lastName)
    .add(email)
    .build();

  // Get the form result
  Bundle bundle = form.getResult();
  String firstName = bundle.getString(FIRST_NAME_KEY);
  // ...

Every field must be provided of a **key** value (**string**), that will be used for finding back the value in the resulting collected **Bundle** object.

**Notice**: the above sentence implies a **key** needs to be **unique** for that **FormView**, or the collecting phase will erase the input value already collected having the same **key**.


Ease fields instantiation: **Form Builder**
---------------------------------------------------------------------

.. code-block:: java

  FormView formView = new FormView(mContext);
  FormBuilder field = formView.getFormBuilder(); // Fields generator
  formView
    .add(field.text(FIRST_NAME_KEY, "First name", getString(R.string.firstname_error)))
    .add(field.text(LAST_NAME_KEY, "Last name", getString(R.string.lastname_error)))
    .add(field.email(EMAIL_KEY, "Email", getString(R.string.email_error)))
    .build();

Prefill
---------------------------------------------------------------------


Create Custom Field
---------------------------------------------------------------------


Conditional Add
---------------------------------------------------------------------


Custom Validation
---------------------------------------------------------------------
